// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders content with correct props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CalendarView
    events={
      Array [
        Object {
          "massage": Object {
            "client": null,
            "date": 1970-01-01T00:00:00.000Z,
            "ending": 1970-01-01T00:00:01.000Z,
            "facility": Object {
              "id": 1,
              "name": "test",
            },
            "id": 1,
            "masseuse": Object {
              "email": "test@masseuse.org",
              "masseur": true,
              "name": "Masseuse",
              "sub": "m-sub",
              "subscribed": false,
              "surname": "Test",
            },
          },
        },
        Object {
          "massage": Object {
            "client": Object {
              "sub": "test",
            },
            "date": 1970-01-01T00:00:01.000Z,
            "ending": 1970-01-01T00:00:02.000Z,
            "facility": Object {
              "id": 1,
              "name": "test",
            },
            "id": 2,
            "masseuse": Object {
              "email": "test2@masseuse.org",
              "masseur": true,
              "name": "Masseuse",
              "sub": "m-sub2",
              "subscribed": true,
              "surname": "Test2",
            },
          },
        },
      ]
    }
    localizer={
      Object {
        "messages": Object {
          "massage": Object {
            "date": "date",
            "event": "event",
            "time": "time",
          },
        },
      }
    }
    onCancel={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <thead>
          <tr>
            <th />
            <th />
            <th />
          </tr>
        </thead>,
        <tbody>
          <EventRow
            event={
              Object {
                "massage": Object {
                  "client": null,
                  "date": 1970-01-01T00:00:00.000Z,
                  "ending": 1970-01-01T00:00:01.000Z,
                  "facility": Object {
                    "id": 1,
                    "name": "test",
                  },
                  "id": 1,
                  "masseuse": Object {
                    "email": "test@masseuse.org",
                    "masseur": true,
                    "name": "Masseuse",
                    "sub": "m-sub",
                    "subscribed": false,
                    "surname": "Test",
                  },
                },
              }
            }
            onCancel={[MockFunction]}
          />
          <EventRow
            event={
              Object {
                "massage": Object {
                  "client": Object {
                    "sub": "test",
                  },
                  "date": 1970-01-01T00:00:01.000Z,
                  "ending": 1970-01-01T00:00:02.000Z,
                  "facility": Object {
                    "id": 1,
                    "name": "test",
                  },
                  "id": 2,
                  "masseuse": Object {
                    "email": "test2@masseuse.org",
                    "masseur": true,
                    "name": "Masseuse",
                    "sub": "m-sub2",
                    "subscribed": true,
                    "surname": "Test2",
                  },
                },
              }
            }
            onCancel={[MockFunction]}
          />
        </tbody>,
      ],
      "hover": true,
      "responsive": true,
      "responsiveTag": "div",
      "size": "sm",
      "striped": true,
      "tag": "table",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <tr>
            <th />
            <th />
            <th />
          </tr>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <th />,
              <th />,
              <th />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "th",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "th",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "th",
            },
          ],
          "type": "tr",
        },
        "type": "thead",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <EventRow
              event={
                Object {
                  "massage": Object {
                    "client": null,
                    "date": 1970-01-01T00:00:00.000Z,
                    "ending": 1970-01-01T00:00:01.000Z,
                    "facility": Object {
                      "id": 1,
                      "name": "test",
                    },
                    "id": 1,
                    "masseuse": Object {
                      "email": "test@masseuse.org",
                      "masseur": true,
                      "name": "Masseuse",
                      "sub": "m-sub",
                      "subscribed": false,
                      "surname": "Test",
                    },
                  },
                }
              }
              onCancel={[MockFunction]}
            />,
            <EventRow
              event={
                Object {
                  "massage": Object {
                    "client": Object {
                      "sub": "test",
                    },
                    "date": 1970-01-01T00:00:01.000Z,
                    "ending": 1970-01-01T00:00:02.000Z,
                    "facility": Object {
                      "id": 1,
                      "name": "test",
                    },
                    "id": 2,
                    "masseuse": Object {
                      "email": "test2@masseuse.org",
                      "masseur": true,
                      "name": "Masseuse",
                      "sub": "m-sub2",
                      "subscribed": true,
                      "surname": "Test2",
                    },
                  },
                }
              }
              onCancel={[MockFunction]}
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "event": Object {
                "massage": Object {
                  "client": null,
                  "date": 1970-01-01T00:00:00.000Z,
                  "ending": 1970-01-01T00:00:01.000Z,
                  "facility": Object {
                    "id": 1,
                    "name": "test",
                  },
                  "id": 1,
                  "masseuse": Object {
                    "email": "test@masseuse.org",
                    "masseur": true,
                    "name": "Masseuse",
                    "sub": "m-sub",
                    "subscribed": false,
                    "surname": "Test",
                  },
                },
              },
              "onCancel": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "class",
            "props": Object {
              "event": Object {
                "massage": Object {
                  "client": Object {
                    "sub": "test",
                  },
                  "date": 1970-01-01T00:00:01.000Z,
                  "ending": 1970-01-01T00:00:02.000Z,
                  "facility": Object {
                    "id": 1,
                    "name": "test",
                  },
                  "id": 2,
                  "masseuse": Object {
                    "email": "test2@masseuse.org",
                    "masseur": true,
                    "name": "Masseuse",
                    "sub": "m-sub2",
                    "subscribed": true,
                    "surname": "Test2",
                  },
                },
              },
              "onCancel": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "tbody",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <thead>
            <tr>
              <th />
              <th />
              <th />
            </tr>
          </thead>,
          <tbody>
            <EventRow
              event={
                Object {
                  "massage": Object {
                    "client": null,
                    "date": 1970-01-01T00:00:00.000Z,
                    "ending": 1970-01-01T00:00:01.000Z,
                    "facility": Object {
                      "id": 1,
                      "name": "test",
                    },
                    "id": 1,
                    "masseuse": Object {
                      "email": "test@masseuse.org",
                      "masseur": true,
                      "name": "Masseuse",
                      "sub": "m-sub",
                      "subscribed": false,
                      "surname": "Test",
                    },
                  },
                }
              }
              onCancel={[MockFunction]}
            />
            <EventRow
              event={
                Object {
                  "massage": Object {
                    "client": Object {
                      "sub": "test",
                    },
                    "date": 1970-01-01T00:00:01.000Z,
                    "ending": 1970-01-01T00:00:02.000Z,
                    "facility": Object {
                      "id": 1,
                      "name": "test",
                    },
                    "id": 2,
                    "masseuse": Object {
                      "email": "test2@masseuse.org",
                      "masseur": true,
                      "name": "Masseuse",
                      "sub": "m-sub2",
                      "subscribed": true,
                      "surname": "Test2",
                    },
                  },
                }
              }
              onCancel={[MockFunction]}
            />
          </tbody>,
        ],
        "hover": true,
        "responsive": true,
        "responsiveTag": "div",
        "size": "sm",
        "striped": true,
        "tag": "table",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <tr>
              <th />
              <th />
              <th />
            </tr>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <th />,
                <th />,
                <th />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": "th",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": "th",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": "th",
              },
            ],
            "type": "tr",
          },
          "type": "thead",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <EventRow
                event={
                  Object {
                    "massage": Object {
                      "client": null,
                      "date": 1970-01-01T00:00:00.000Z,
                      "ending": 1970-01-01T00:00:01.000Z,
                      "facility": Object {
                        "id": 1,
                        "name": "test",
                      },
                      "id": 1,
                      "masseuse": Object {
                        "email": "test@masseuse.org",
                        "masseur": true,
                        "name": "Masseuse",
                        "sub": "m-sub",
                        "subscribed": false,
                        "surname": "Test",
                      },
                    },
                  }
                }
                onCancel={[MockFunction]}
              />,
              <EventRow
                event={
                  Object {
                    "massage": Object {
                      "client": Object {
                        "sub": "test",
                      },
                      "date": 1970-01-01T00:00:01.000Z,
                      "ending": 1970-01-01T00:00:02.000Z,
                      "facility": Object {
                        "id": 1,
                        "name": "test",
                      },
                      "id": 2,
                      "masseuse": Object {
                        "email": "test2@masseuse.org",
                        "masseur": true,
                        "name": "Masseuse",
                        "sub": "m-sub2",
                        "subscribed": true,
                        "surname": "Test2",
                      },
                    },
                  }
                }
                onCancel={[MockFunction]}
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "class",
              "props": Object {
                "event": Object {
                  "massage": Object {
                    "client": null,
                    "date": 1970-01-01T00:00:00.000Z,
                    "ending": 1970-01-01T00:00:01.000Z,
                    "facility": Object {
                      "id": 1,
                      "name": "test",
                    },
                    "id": 1,
                    "masseuse": Object {
                      "email": "test@masseuse.org",
                      "masseur": true,
                      "name": "Masseuse",
                      "sub": "m-sub",
                      "subscribed": false,
                      "surname": "Test",
                    },
                  },
                },
                "onCancel": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "class",
              "props": Object {
                "event": Object {
                  "massage": Object {
                    "client": Object {
                      "sub": "test",
                    },
                    "date": 1970-01-01T00:00:01.000Z,
                    "ending": 1970-01-01T00:00:02.000Z,
                    "facility": Object {
                      "id": 1,
                      "name": "test",
                    },
                    "id": 2,
                    "masseuse": Object {
                      "email": "test2@masseuse.org",
                      "masseur": true,
                      "name": "Masseuse",
                      "sub": "m-sub2",
                      "subscribed": true,
                      "surname": "Test2",
                    },
                  },
                },
                "onCancel": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "tbody",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
